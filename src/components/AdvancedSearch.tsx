import React, { useState, useEffect, useRef } from 'react'
import { motion, AnimatePresence } from 'framer-motion'
import { Search, X, Clock, Trophy, Users, Calendar, Filter, Sparkles } from 'lucide-react'
import { Button } from './ui/button'
import { Input } from './ui/input'
import { Card, CardContent } from './ui/card'
import { Badge } from './ui/badge'
import { Tabs, TabsContent, TabsList, TabsTrigger } from './ui/tabs'

interface SearchResult {
  id: string
  title: string
  type: 'news' | 'player' | 'match' | 'event'
  excerpt: string
  date: string
  relevance: number
  image?: string
}

interface SearchSuggestion {
  id: string
  text: string
  type: 'recent' | 'trending' | 'suggestion'
  icon: React.ReactNode
}

export const AdvancedSearch: React.FC = () => {
  const [isOpen, setIsOpen] = useState(false)
  const [query, setQuery] = useState('')
  const [results, setResults] = useState<SearchResult[]>([])
  const [suggestions, setSuggestions] = useState<SearchSuggestion[]>([])
  const [isLoading, setIsLoading] = useState(false)
  const [activeTab, setActiveTab] = useState('all')
  const [recentSearches, setRecentSearches] = useState<string[]>([])
  const inputRef = useRef<HTMLInputElement>(null)

  const mockResults: SearchResult[] = [\n    {\n      id: '1',\n      title: 'Penhill United Secures Victory in Derby Match',\n      type: 'news',\n      excerpt: 'A thrilling 3-2 victory against local rivals showcases the team\\'s resilience...',\n      date: '2 hours ago',\n      relevance: 95,\n      image: 'https://images.unsplash.com/photo-1574629810360-7efbbe195018?w=100&h=100&fit=crop'\n    },\n    {\n      id: '2',\n      title: 'Marcus Thompson',\n      type: 'player',\n      excerpt: 'Top scorer with 18 goals this season. Forward position.',\n      date: 'Player Profile',\n      relevance: 88,\n      image: 'https://api.dicebear.com/7.x/avataaars/svg?seed=Marcus'\n    },\n    {\n      id: '3',\n      title: 'vs. Riverside FC',\n      type: 'match',\n      excerpt: 'Upcoming match on July 20th at 3:00 PM at Penhill Stadium',\n      date: 'July 20, 2024',\n      relevance: 82\n    },\n    {\n      id: '4',\n      title: 'Youth Academy Trials',\n      type: 'event',\n      excerpt: 'Open trials for players aged 8-16. Registration required.',\n      date: 'July 22, 2024',\n      relevance: 75\n    }\n  ]\n\n  const trendingSuggestions: SearchSuggestion[] = [\n    { id: '1', text: 'Derby match highlights', type: 'trending', icon: <Trophy className=\"w-4 h-4\" /> },\n    { id: '2', text: 'Marcus Thompson stats', type: 'trending', icon: <Users className=\"w-4 h-4\" /> },\n    { id: '3', text: 'Next fixture', type: 'trending', icon: <Calendar className=\"w-4 h-4\" /> },\n    { id: '4', text: 'League table position', type: 'trending', icon: <Trophy className=\"w-4 h-4\" /> }\n  ]\n\n  useEffect(() => {\n    // Load recent searches from localStorage\n    const saved = localStorage.getItem('penhill_recent_searches')\n    if (saved) {\n      try {\n        setRecentSearches(JSON.parse(saved))\n      } catch (error) {\n        console.error('Error loading recent searches:', error)\n      }\n    }\n  }, [])\n\n  useEffect(() => {\n    if (query.length > 0) {\n      setIsLoading(true)\n      \n      // Simulate search delay\n      const timer = setTimeout(() => {\n        const filtered = mockResults.filter(result => \n          result.title.toLowerCase().includes(query.toLowerCase()) ||\n          result.excerpt.toLowerCase().includes(query.toLowerCase())\n        ).sort((a, b) => b.relevance - a.relevance)\n        \n        setResults(filtered)\n        setIsLoading(false)\n      }, 300)\n      \n      return () => clearTimeout(timer)\n    } else {\n      setResults([])\n      setIsLoading(false)\n    }\n  }, [query])\n\n  useEffect(() => {\n    if (query.length === 0) {\n      // Show recent searches and trending suggestions\n      const recentSuggestions: SearchSuggestion[] = recentSearches.slice(0, 3).map((search, index) => ({\n        id: `recent-${index}`,\n        text: search,\n        type: 'recent',\n        icon: <Clock className=\"w-4 h-4\" />\n      }))\n      \n      setSuggestions([...recentSuggestions, ...trendingSuggestions])\n    } else {\n      // Show search suggestions based on query\n      const querySuggestions = trendingSuggestions.filter(s => \n        s.text.toLowerCase().includes(query.toLowerCase())\n      )\n      setSuggestions(querySuggestions)\n    }\n  }, [query, recentSearches])\n\n  const handleSearch = (searchQuery: string) => {\n    if (searchQuery.trim()) {\n      // Add to recent searches\n      const updated = [searchQuery, ...recentSearches.filter(s => s !== searchQuery)].slice(0, 5)\n      setRecentSearches(updated)\n      localStorage.setItem('penhill_recent_searches', JSON.stringify(updated))\n      \n      setQuery(searchQuery)\n    }\n  }\n\n  const handleKeyDown = (e: React.KeyboardEvent) => {\n    if (e.key === 'Enter') {\n      handleSearch(query)\n    } else if (e.key === 'Escape') {\n      setIsOpen(false)\n      setQuery('')\n    }\n  }\n\n  const getTypeIcon = (type: SearchResult['type']) => {\n    switch (type) {\n      case 'news': return <Trophy className=\"w-4 h-4\" />\n      case 'player': return <Users className=\"w-4 h-4\" />\n      case 'match': return <Calendar className=\"w-4 h-4\" />\n      case 'event': return <Calendar className=\"w-4 h-4\" />\n      default: return <Search className=\"w-4 h-4\" />\n    }\n  }\n\n  const getTypeColor = (type: SearchResult['type']) => {\n    switch (type) {\n      case 'news': return 'bg-blue-100 text-blue-800'\n      case 'player': return 'bg-green-100 text-green-800'\n      case 'match': return 'bg-purple-100 text-purple-800'\n      case 'event': return 'bg-orange-100 text-orange-800'\n      default: return 'bg-gray-100 text-gray-800'\n    }\n  }\n\n  const filteredResults = activeTab === 'all' \n    ? results \n    : results.filter(r => r.type === activeTab)\n\n  return (\n    <>\n      <Button\n        variant=\"outline\"\n        onClick={() => setIsOpen(true)}\n        className=\"gap-2 text-muted-foreground hover:text-foreground\"\n      >\n        <Search className=\"w-4 h-4\" />\n        <span className=\"hidden sm:inline\">Search club...</span>\n        <kbd className=\"hidden sm:inline-flex h-5 select-none items-center gap-1 rounded border bg-muted px-1.5 font-mono text-[10px] font-medium text-muted-foreground ml-auto\">\n          <span className=\"text-xs\">âŒ˜</span>K\n        </kbd>\n      </Button>\n\n      <AnimatePresence>\n        {isOpen && (\n          <motion.div\n            initial={{ opacity: 0 }}\n            animate={{ opacity: 1 }}\n            exit={{ opacity: 0 }}\n            className=\"fixed inset-0 z-50 bg-background/80 backdrop-blur-sm\"\n            onClick={() => setIsOpen(false)}\n          >\n            <motion.div\n              initial={{ opacity: 0, y: -50, scale: 0.95 }}\n              animate={{ opacity: 1, y: 0, scale: 1 }}\n              exit={{ opacity: 0, y: -50, scale: 0.95 }}\n              className=\"fixed top-[10%] left-1/2 -translate-x-1/2 w-full max-w-2xl mx-4\"\n              onClick={(e) => e.stopPropagation()}\n            >\n              <Card className=\"shadow-2xl border-2\">\n                <CardContent className=\"p-0\">\n                  {/* Search Input */}\n                  <div className=\"flex items-center gap-3 p-4 border-b\">\n                    <Search className=\"w-5 h-5 text-muted-foreground\" />\n                    <Input\n                      ref={inputRef}\n                      value={query}\n                      onChange={(e) => setQuery(e.target.value)}\n                      onKeyDown={handleKeyDown}\n                      placeholder=\"Search news, players, matches, events...\"\n                      className=\"border-0 focus-visible:ring-0 text-lg\"\n                      autoFocus\n                    />\n                    <Button\n                      variant=\"ghost\"\n                      size=\"icon\"\n                      onClick={() => setIsOpen(false)}\n                      className=\"h-8 w-8\"\n                    >\n                      <X className=\"w-4 h-4\" />\n                    </Button>\n                  </div>\n\n                  {/* Search Content */}\n                  <div className=\"max-h-96 overflow-y-auto\">\n                    {query.length === 0 ? (\n                      /* Suggestions */\n                      <div className=\"p-4\">\n                        <div className=\"flex items-center gap-2 mb-3\">\n                          <Sparkles className=\"w-4 h-4 text-muted-foreground\" />\n                          <span className=\"text-sm font-medium text-muted-foreground\">\n                            {suggestions.some(s => s.type === 'recent') ? 'Recent & Trending' : 'Trending Searches'}\n                          </span>\n                        </div>\n                        <div className=\"space-y-2\">\n                          {suggestions.map((suggestion) => (\n                            <motion.button\n                              key={suggestion.id}\n                              whileHover={{ x: 4 }}\n                              onClick={() => handleSearch(suggestion.text)}\n                              className=\"flex items-center gap-3 w-full p-2 rounded-lg hover:bg-muted/50 text-left transition-colors\"\n                            >\n                              <div className={`p-1 rounded ${suggestion.type === 'recent' ? 'text-muted-foreground' : 'text-primary'}`}>\n                                {suggestion.icon}\n                              </div>\n                              <span className=\"text-sm\">{suggestion.text}</span>\n                              {suggestion.type === 'trending' && (\n                                <Badge variant=\"secondary\" className=\"ml-auto text-xs\">\n                                  Trending\n                                </Badge>\n                              )}\n                            </motion.button>\n                          ))}\n                        </div>\n                      </div>\n                    ) : (\n                      /* Search Results */\n                      <div>\n                        {/* Filter Tabs */}\n                        <div className=\"px-4 pt-4\">\n                          <Tabs value={activeTab} onValueChange={setActiveTab}>\n                            <TabsList className=\"grid w-full grid-cols-5\">\n                              <TabsTrigger value=\"all\">All</TabsTrigger>\n                              <TabsTrigger value=\"news\">News</TabsTrigger>\n                              <TabsTrigger value=\"player\">Players</TabsTrigger>\n                              <TabsTrigger value=\"match\">Matches</TabsTrigger>\n                              <TabsTrigger value=\"event\">Events</TabsTrigger>\n                            </TabsList>\n                          </Tabs>\n                        </div>\n\n                        {/* Results */}\n                        <div className=\"p-4\">\n                          {isLoading ? (\n                            <div className=\"space-y-3\">\n                              {[...Array(3)].map((_, i) => (\n                                <div key={i} className=\"animate-pulse\">\n                                  <div className=\"flex items-center gap-3\">\n                                    <div className=\"w-12 h-12 bg-muted rounded-lg\" />\n                                    <div className=\"flex-1 space-y-2\">\n                                      <div className=\"h-4 bg-muted rounded w-3/4\" />\n                                      <div className=\"h-3 bg-muted rounded w-1/2\" />\n                                    </div>\n                                  </div>\n                                </div>\n                              ))}\n                            </div>\n                          ) : filteredResults.length > 0 ? (\n                            <div className=\"space-y-3\">\n                              {filteredResults.map((result, index) => (\n                                <motion.div\n                                  key={result.id}\n                                  initial={{ opacity: 0, y: 20 }}\n                                  animate={{ opacity: 1, y: 0 }}\n                                  transition={{ delay: index * 0.1 }}\n                                  className=\"flex items-start gap-3 p-3 rounded-lg hover:bg-muted/50 cursor-pointer transition-colors\"\n                                >\n                                  {result.image ? (\n                                    <img \n                                      src={result.image} \n                                      alt={result.title}\n                                      className=\"w-12 h-12 rounded-lg object-cover\"\n                                    />\n                                  ) : (\n                                    <div className=\"w-12 h-12 rounded-lg bg-muted flex items-center justify-center\">\n                                      {getTypeIcon(result.type)}\n                                    </div>\n                                  )}\n                                  \n                                  <div className=\"flex-1 min-w-0\">\n                                    <div className=\"flex items-center gap-2 mb-1\">\n                                      <h3 className=\"font-medium text-sm truncate\">{result.title}</h3>\n                                      <Badge className={`text-xs ${getTypeColor(result.type)}`}>\n                                        {result.type}\n                                      </Badge>\n                                    </div>\n                                    <p className=\"text-xs text-muted-foreground line-clamp-2 mb-1\">\n                                      {result.excerpt}\n                                    </p>\n                                    <div className=\"flex items-center justify-between\">\n                                      <span className=\"text-xs text-muted-foreground\">{result.date}</span>\n                                      <span className=\"text-xs text-primary font-medium\">\n                                        {result.relevance}% match\n                                      </span>\n                                    </div>\n                                  </div>\n                                </motion.div>\n                              ))}\n                            </div>\n                          ) : (\n                            <div className=\"text-center py-8\">\n                              <Search className=\"w-8 h-8 mx-auto mb-2 text-muted-foreground opacity-50\" />\n                              <p className=\"text-sm text-muted-foreground\">No results found for \"{query}\"</p>\n                              <p className=\"text-xs text-muted-foreground mt-1\">\n                                Try searching for news, players, matches, or events\n                              </p>\n                            </div>\n                          )}\n                        </div>\n                      </div>\n                    )}\n                  </div>\n                </CardContent>\n              </Card>\n            </motion.div>\n          </motion.div>\n        )}\n      </AnimatePresence>\n    </>\n  )\n}\n\n// Add keyboard shortcut listener\nif (typeof window !== 'undefined') {\n  document.addEventListener('keydown', (e) => {\n    if ((e.metaKey || e.ctrlKey) && e.key === 'k') {\n      e.preventDefault()\n      // Trigger search modal open\n      const searchButton = document.querySelector('[data-search-trigger]') as HTMLButtonElement\n      searchButton?.click()\n    }\n  })\n}